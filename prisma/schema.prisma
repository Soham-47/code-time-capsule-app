// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String    @unique
  email         String    @unique
  emailVerified DateTime?
  image         String?
  bio           String?   @db.VarChar(160)
  password      String?
  isPublic      Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  capsules      Capsule[]
  comments      Comment[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Capsule {
  id           String       @id @default(cuid())
  title        String       @db.VarChar(100)
  description  String?      @db.VarChar(500)
  codeContent  String?      @db.Text
  note         String?      @db.VarChar(2000)
  language     String?
  accessMode   AccessMode   @default(PRIVATE)
  passHint     String?      @db.VarChar(100)
  unlockDate   DateTime
  isUnlocked   Boolean      @default(false)
  isDeleted    Boolean      @default(false)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  deletedAt    DateTime?
  
  userId       String
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  files        CapsuleFile[]
  images       CapsuleImage[]
  comments     Comment[]
  shares       CapsuleShare[]
}

model CapsuleFile {
  id         String   @id @default(cuid())
  filename   String
  fileKey    String   @unique
  fileSize   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  capsuleId  String
  capsule    Capsule  @relation(fields: [capsuleId], references: [id], onDelete: Cascade)
}

model CapsuleImage {
  id         String   @id @default(cuid())
  imageKey   String   @unique
  imageSize  Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  capsuleId  String
  capsule    Capsule  @relation(fields: [capsuleId], references: [id], onDelete: Cascade)
}

model CapsuleShare {
  id         String   @id @default(cuid())
  email      String
  createdAt  DateTime @default(now())
  
  capsuleId  String
  capsule    Capsule  @relation(fields: [capsuleId], references: [id], onDelete: Cascade)
  
  @@unique([capsuleId, email])
}

model Comment {
  id         String   @id @default(cuid())
  content    String   @db.VarChar(1000)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  capsuleId  String
  capsule    Capsule  @relation(fields: [capsuleId], references: [id], onDelete: Cascade)
}

enum AccessMode {
  PRIVATE
  SHARED
  PUBLIC
}
